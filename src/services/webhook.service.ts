import { 
	Action, 
	Command, 
	Hears, 
	InjectBot, 
	Start, 
	Update 
} from 'nestjs-telegraf';
import { 
	Context, 
	Telegraf, 
	Markup, 
	Scenes 
} from 'telegraf';
import { 
	inline_keyboard_owner, 
	inline_keyboard_user, 
	keyboard_owner, 
	keyboard_user
} from 'src/common/keyboards';
import { Injectable } from '@nestjs/common';
import { DatabaseService } from './';
import { Role } from '../types';
import { CalendarAPI } from 'src/common/api/api';
import { User } from 'src/models';

@Injectable()
@Update()
export class WebhookService {
	constructor(
		@InjectBot() private readonly bot: Telegraf<Context>,
        private readonly databaseService: DatabaseService
	) { }


	@Start()
	async startCommand(ctx: Context) {
		const calendarAPI = new CalendarAPI("");
		const telegram_id = ctx.message.from.username;

		// const user = await this.databaseService.findTgUser({ id: telegram_id });
		const [ user ] = await calendarAPI.getUser(telegram_id);
		
		let role = telegram_id != "Alexeev_Dauwalter" ? 'USER' : "OWNER";

		await this.bot.telegram.setMyCommands(
			role == "USER" 
			? keyboard_user 
			: keyboard_owner		
		);

		if (!user) {
			await calendarAPI.addUser(new User({
				id: telegram_id,
				name: ctx.message.from.first_name,
				role: role.toString(),
			}));
		}

		let text = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ Google Calendar –∏ OpenAI ChatGPT –∏ DALL-E –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –æ–±—â–µ–Ω–∏—è!\n';
		
		text += role == "USER"
		? '\nüë§ –í–∞—à–∞ —Ä–æ–ª—å <b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>.\n\nüóì <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</b> –∏–ª–∏ <code>/book</code> ‚Äî –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É\nüí¨ <b>–ß–∞—Ç</b> –∏–ª–∏ <code>/chat</code> ‚Äî –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º ChatGPT'
		: '\n‚≠ê –í–∞—à–∞ —Ä–æ–ª—å <b>–≤–ª–∞–¥–µ–ª–µ—Ü</b>.\n\nüóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> –∏–ª–∏ <code>/schedule</code> ‚Äî –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\nüìå <b>–°–æ–±—ã—Ç–∏—è</b> –∏–ª–∏ <code>/events</code> ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\nüïì <b>–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è</b>  –∏–ª–∏ <code>/set_availability</code> ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á\n‚ùî <b>–í–æ–ø—Ä–æ—Å</b> –∏–ª–∏ <code>/ask</code> ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç ChatGPT\nüñº <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</b> –∏–ª–∏ <code>/generate</code> ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç DALL-E'; 
		
		text += '\n\n‚öôÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é inline –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥.';


		const message = await ctx.replyWithPhoto('https://fotomir.co/files/img/pics/odinochestvo-kartinki-na-avu/odinochestvo-kartinki-na-avu-36.webp', {
				caption: text,
				parse_mode: 'HTML',
				reply_markup: Markup.keyboard(
					role == "USER" 
					? inline_keyboard_user
					: inline_keyboard_owner
				).resize().reply_markup
			}
		);

		const fullChatInfo = await ctx.getChat();
		if (!fullChatInfo.pinned_message)
			await ctx.pinChatMessage(message.message_id);
	}

	@Command('schedule')
	@Hears('schedule')
	@Hears('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì')
	async scheduleCommand(ctx: Scenes.SceneContext) {
		const calendarAPI = new CalendarAPI("");
		const [ user ] = await calendarAPI.getUser(ctx.message.from.username);

		ctx.scene.enter(
			"scheduleRange", { 
				user 
			}
		);
	}


	@Command('book')
	@Hears('book')
	@Hears('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è üóì')
	async book(ctx: Scenes.SceneContext) {
		const calendarAPI = new CalendarAPI("");
		const [ user ] = await calendarAPI.getUser(ctx.message.from.username);

		await ctx.scene.enter("eventsMain", {
			bot: this.bot,
			skip: true, 
			user
		});
	}


	@Command('events')
	@Hears('events')
	@Hears('–°–æ–±—ã—Ç–∏—è üìå')
	async events(ctx: Scenes.SceneContext) {
		const calendarAPI = new CalendarAPI("");
		const [ user ] = await calendarAPI.getUser(ctx.message.from.username);

		await ctx.scene.enter("eventsMain", {
			bot: this.bot,
			skip: false,
			user 
		});
	}


	@Command('set_availability')
	@Hears('set_availability')
	@Hears('–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è üïì')
	async updateSettings(ctx: Scenes.SceneContext) {
		const calendarAPI = new CalendarAPI("");
		const [ user ] = await calendarAPI.getUser(ctx.message.from.username);
		
		await ctx.scene.enter("setSettings", {
			user: user
		});
	}
	

	@Command('ask')
	@Command('generate')
	@Command('chat')
	@Hears('chat')
	@Hears('–ß–∞—Ç üí¨')
	@Hears('–í–æ–ø—Ä–æ—Å ‚ùî')
	@Hears('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üñº')
	async chat(ctx: Context) {
		await ctx.reply('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
	}
}